// Generated by LiveScript 1.5.0
(function(){
  var crypto2, p, genpass, algorithms, encryptDecrypt, encrypt, decrypt, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  crypto2 = require('crypto2');
  p = require('prelude-ls');
  out$.genpass = genpass = function(cb){
    return crypto2.createPassword(function(err, password){
      cb(err, password);
    });
  };
  algorithms = [[bind$(crypto2, 'encrypt'), bind$(crypto2, 'decrypt')], [bind$(crypto2.encrypt, 'aes256cbc'), bind$(crypto2.decrypt, 'aes256cbc')]];
  encryptDecrypt = curry$(function(index, arg$, string, key, cb){
    var head, tail;
    head = arg$[0], tail = slice$.call(arg$, 1);
    if (head == null) {
      return cb(null, string);
    }
    return head[index](string, key, function(err, current){
      if (err != null) {
        return err;
      }
      encryptDecrypt(index, tail, current, key, function(err, final){
        cb(err, final);
      });
    });
  });
  out$.encrypt = encrypt = encryptDecrypt(0, algorithms);
  out$.decrypt = decrypt = encryptDecrypt(1, p.reverse(algorithms));
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
