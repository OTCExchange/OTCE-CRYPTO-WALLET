// Generated by LiveScript 1.5.0
(function(){
  var request, rateCache, moment, p, big, iserror, buildUrl, eachMinuteQuarter, roundMinuteQuarterTrade, roundMinuteQuarter, observers, notify, $off, $on, getString, dateToTs, calcAvgTrade, calcAvg, aggregate, calcAllAvgs, loadRates, uploadRates, rateIndex, getRateIndex, setRateIndex, createRateIndex, getRate, getRateByPair, getOrLoadRate, out$ = typeof exports != 'undefined' && exports || this, toString$ = {}.toString;
  request = require('request');
  rateCache = require('./rate-cache.js');
  moment = require('moment');
  p = require('prelude-ls');
  big = require('big.js');
  iserror = require('../iserror.js')('https://poloniex.com');
  buildUrl = function(pair){
    return "https://poloniex.com/public?command=returnTradeHistory&currencyPair=" + pair;
  };
  eachMinuteQuarter = 15 * 60;
  roundMinuteQuarterTrade = function(trade){
    return roundMinuteQuarter('ceil', trade.date);
  };
  roundMinuteQuarter = curry$(function(direction, date){
    var plus, ts;
    plus = direction === 'ceil' ? 1 : 0;
    ts = dateToTs(date);
    return parseInt(ts / eachMinuteQuarter + 1) * eachMinuteQuarter;
  });
  observers = [];
  notify = function(name, data){
    var this$ = this;
    return p.each(function(it){
      return it(data);
    })(
    p.map(function(it){
      return it[1];
    })(
    p.filter(function(it){
      return it[0] === name;
    })(
    observers)));
  };
  out$.$off = $off = function(cb){
    var index;
    if (cb == null) {
      observers.length = 0;
    }
    index = observers.map(function(it){
      return it[1];
    }).indexOf(cb) > -1;
    if (index > -1) {
      observers.splice(index, 1);
    }
    return {
      $off: $off
    };
  };
  out$.$on = $on = function(name, cb){
    observers.push([name, cb]);
    return {
      $on: $on
    };
  };
  getString = function(date){
    switch (false) {
    case !date.match(/^[0-9]+$/):
      return parseInt(date);
    default:
      return moment(date.replace(' ', 'T') + 'Z').unix();
    }
  };
  dateToTs = function(date){
    switch (toString$.call(date).slice(8, -1)) {
    case 'String':
      return getString(date);
    case 'Number':
      return date;
    case 'Date':
      return parseInt(date.getTime() / 1000);
    case 'Undefined':
      return null;
    case 'Null':
      return null;
    default:
      return "Type of date '" + toString$.call(date).slice(8, -1) + "' is not supported";
    }
  };
  calcAvgTrade = function(accum, t){
    accum.sumOfRxA = accum.sumOfRxA.plus(new big(t.rate).times(t.amount));
    accum.sumOfA = accum.sumOfA.plus(t.amount);
    return accum;
  };
  calcAvg = function(trades){
    var accum, result;
    accum = {
      sumOfRxA: new big(0),
      sumOfA: new big(0)
    };
    result = p.foldl(calcAvgTrade, accum)(
    trades);
    return result.sumOfRxA.div(result.sumOfA).toString();
  };
  aggregate = function(collector, trade){
    var ref$, group;
    collector.unique = (ref$ = collector.unique) != null
      ? ref$
      : {};
    if (trade.avg != null) {
      return collector;
    }
    if (collector.unique[trade.globalTradeID] != null) {
      return collector;
    }
    collector.unique[trade.globalTradeID] = true;
    group = roundMinuteQuarterTrade(trade);
    collector[group] = (ref$ = collector[group]) != null
      ? ref$
      : [];
    collector[group].push(trade);
    return collector;
  };
  calcAllAvgs = function(collector){
    var i$, ref$, len$, key;
    delete collector.unique;
    for (i$ = 0, len$ = (ref$ = Object.keys(collector)).length; i$ < len$; ++i$) {
      key = ref$[i$];
      collector[key] = calcAvg(collector[key]);
    }
    return collector;
  };
  out$.loadRates = loadRates = curry$(function(config, cb){
    return uploadRates(config, function(err, items){
      var start, result, end;
      if (err != null) {
        return cb(err);
      }
      start = new Date();
      notify('aggregation-start', {
        length: items.length,
        start: start
      });
      result = calcAllAvgs(
      p.foldl(aggregate, {})(
      items));
      end = new Date();
      notify('aggregation-stop', {
        end: end,
        duration: start.getTime() - end.getTime()
      });
      cb(null, result);
    });
  });
  uploadRates = curry$(function(arg$, cb){
    var startCampaignDate, currencyPair, toDate, url, start_campaign_ts, toTs, currentUrl;
    startCampaignDate = arg$.startCampaignDate, currencyPair = arg$.currencyPair, toDate = arg$.toDate;
    if (startCampaignDate == null || currencyPair == null || toDate == null) {
      return cb("Input Error");
    }
    url = buildUrl(currencyPair);
    start_campaign_ts = dateToTs(startCampaignDate);
    toTs = dateToTs(toDate);
    currentUrl = url + "&end=" + (toTs + eachMinuteQuarter);
    notify('load-rates', {
      startCampaignDate: startCampaignDate,
      currencyPair: currencyPair,
      toDate: toDate,
      currentUrl: currentUrl
    });
    return request(currentUrl, function(err, response, body){
      var items, last, nextTs;
      if (err != null) {
        return cb(err);
      }
      items = JSON.parse(body);
      if (items.error != null) {
        return cb(items.error);
      }
      if (items.length === 0) {
        return cb(null, []);
      }
      last = items[items.length - 1];
      nextTs = last.date;
      if (start_campaign_ts > toTs) {
        return cb(null, items);
      }
      uploadRates({
        startCampaignDate: startCampaignDate,
        currencyPair: currencyPair,
        toDate: nextTs
      }, function(err, nextItems){
        var allItems;
        if (err != null) {
          return cb("Error for " + url + "/" + nextTs + ": " + err);
        }
        allItems = items.concat(nextItems);
        cb(null, allItems);
      });
    });
  });
  out$.rateIndex = rateIndex = {};
  out$.getRateIndex = getRateIndex = function(currencyPair){
    return rateIndex[currencyPair.toLowerCase()];
  };
  out$.setRateIndex = setRateIndex = function(currencyPair, rateIndex){
    return rateIndex[currencyPair.toLowerCase()] = rateIndex;
  };
  out$.createRateIndex = createRateIndex = function(arg$, cb){
    var startCampaignDate, currencyPair, toDate, ref$, cbWrap;
    startCampaignDate = arg$.startCampaignDate, currencyPair = arg$.currencyPair, toDate = arg$.toDate;
    rateIndex.running = (ref$ = rateIndex.running) != null
      ? ref$
      : {};
    if (rateIndex.running[currencyPair.toLowerCase()]) {
      return cb('Running');
    }
    notify('create-index-start', {
      startCampaignDate: startCampaignDate,
      currencyPair: currencyPair,
      toDate: toDate
    });
    rateIndex.running[currencyPair.toLowerCase()] = true;
    cbWrap = function(err, res){
      rateIndex.running[currencyPair.toLowerCase()] = false;
      notify('create-index-end', {
        startCampaignDate: startCampaignDate,
        currencyPair: currencyPair,
        toDate: toDate
      });
      return cb(err, res);
    };
    return loadRates({
      startCampaignDate: startCampaignDate,
      currencyPair: currencyPair,
      toDate: toDate
    }, function(err, rates){
      var ri;
      if (err != null) {
        return cbWrap(err);
      }
      ri = rateIndex[currencyPair.toLowerCase()] = rates;
      cbWrap(null, rates);
    });
  };
  out$.getRate = getRate = function(ts){
    var btcEth, usdtEth;
    btcEth = getRateByPair(ts, 'BTC_ETH');
    usdtEth = getRateByPair(ts, 'USDT_ETH');
    return {
      ETH: {
        BTC: btcEth,
        CHF: usdtEth
      }
    };
  };
  getRateByPair = function(ts, currencyPair){
    var rounded, ref$;
    rounded = roundMinuteQuarter('floor', ts);
    return (ref$ = rateIndex[currencyPair.toLowerCase()]) != null ? ref$[rounded] : void 8;
  };
  getOrLoadRate = function(arg$, cb){
    var startCampaignDate, ts, currencyPair, rate;
    startCampaignDate = arg$.startCampaignDate, ts = arg$.ts, currencyPair = arg$.currencyPair;
    rate = getRate({
      ts: ts,
      currencyPair: currencyPair
    });
    if (rate != null) {
      return cb(null, rate);
    }
    return createRateIndex({
      startCampaignDate: startCampaignDate,
      ts: ts,
      currencyPair: currencyPair
    }, function(err){
      var rate;
      if (err != null) {
        return cb(err);
      }
      rate = getRate({
        ts: ts,
        currencyPair: currencyPair
      });
      cb(null, rate);
    });
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
